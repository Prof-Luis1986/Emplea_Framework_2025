import flet as ft
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Preguntas y respuestas ampliadas (con variantes para mejorar el modelo)
preguntas = [
    "hola", "holaa", "buenos dÃ­as", "buenas tardes", "buenas noches", "buenas",
    "Â¿cÃ³mo estÃ¡s?", "cÃ³mo estÃ¡s", "quÃ© tal", "Â¿quÃ© tal?", "Â¿quiÃ©n eres?", "quiÃ©n eres",
    "Â¿cÃ³mo te llamas?", "cÃ³mo te llamas", "Â¿quÃ© es python?", "quÃ© es python",
    "cuÃ©ntame un chiste", "dime un chiste", "gracias", "muchas gracias",
    "Â¿quÃ© tiempo hace?", "Â¿va a llover?", "Â¿me puedes ayudar?", "ayuda",
    "Â¿quÃ© hora es?", "Â¿quÃ© dÃ­a es hoy?", "Â¿puedes aprender?", "Â¿eres inteligente?",
    "Â¿cuÃ¡l es tu color favorito?", "Â¿te gusta la mÃºsica?", "Â¿puedes cantar?",
    "Â¿puedes bailar?", "Â¿cuÃ¡l es tu comida favorita?", "Â¿puedes contar hasta 10?",
    "cuÃ©ntame algo interesante", "adiÃ³s", "hasta luego", "nos vemos"
]

respuestas = [
    "Â¡Hola! Â¿En quÃ© puedo ayudarte?",
    "Â¡Hola! Â¿En quÃ© puedo ayudarte?",
    "Â¡Buenos dÃ­as! Â¿CÃ³mo puedo ayudarte?",
    "Â¡Buenas tardes! Â¿En quÃ© te ayudo?",
    "Â¡Buenas noches! Â¿Necesitas algo?",
    "Â¡Hola! Â¿En quÃ© puedo ayudarte?",
    "Â¡Estoy bien, gracias! Â¿Y tÃº?",
    "Â¡Estoy bien, gracias! Â¿Y tÃº?",
    "Â¡Todo bien! Â¿Y tÃº?",
    "Â¡Todo bien! Â¿Y tÃº?",
    "Soy tu asistente virtual, creado con Python y un poco de IA.",
    "Soy tu asistente virtual, creado con Python y un poco de IA.",
    "Me llamo Asistente Virtual, pero puedes ponerme el nombre que quieras.",
    "Me llamo Asistente Virtual, pero puedes ponerme el nombre que quieras.",
    "Python es un lenguaje de programaciÃ³n muy popular y fÃ¡cil de aprender.",
    "Python es un lenguaje de programaciÃ³n muy popular y fÃ¡cil de aprender.",
    "Â¿Por quÃ© los programadores confunden Halloween y Navidad? Porque OCT 31 == DEC 25.",
    "Â¿Por quÃ© el libro de matemÃ¡ticas estaba triste? Porque tenÃ­a demasiados problemas.",
    "Â¡De nada! Estoy aquÃ­ para ayudarte.",
    "Â¡Gracias a ti por usarme!",
    "No tengo acceso al clima en tiempo real, pero espero que haga buen dÃ­a.",
    "No puedo predecir el clima, pero lleva paraguas por si acaso.",
    "Â¡Por supuesto! PregÃºntame lo que quieras.",
    "Estoy aquÃ­ para ayudarte. Â¿QuÃ© necesitas?",
    "No tengo reloj, pero puedes verlo en tu dispositivo.",
    "No tengo calendario, pero seguro que es un gran dÃ­a.",
    "Por ahora no aprendo, pero puedo responder lo que sÃ©.",
    "Â¡Intento serlo! Â¿TÃº quÃ© opinas?",
    "Me gustan todos los colores, pero el azul es especial.",
    "Â¡SÃ­! La mÃºsica alegra el dÃ­a.",
    "No puedo cantar, pero puedo escribir letras.",
    "No tengo cuerpo, pero bailo en la nube.",
    "No como, pero me gustan los bytes.",
    "Â¡Claro! Uno, dos, tres, cuatro, cinco, seis, siete, ocho, nueve, diez.",
    "Â¿SabÃ­as que las abejas pueden reconocer rostros humanos? Â¡IncreÃ­ble!",
    "Â¡AdiÃ³s! Que tengas un buen dÃ­a.",
    "Â¡Hasta luego! Vuelve cuando quieras.",
    "Â¡Nos vemos pronto! CuÃ­date."
]

# Entrenamiento del modelo
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(preguntas)
modelo = MultinomialNB()
modelo.fit(X, range(len(respuestas)))

def responder(mensaje: str) -> str:
    """Devuelve la respuesta mÃ¡s probable para un mensaje dado."""
    X_test = vectorizer.transform([mensaje])
    idx = modelo.predict(X_test)[0]
    return respuestas[idx]

def main(page: ft.Page):
    page.title = "Asistente Virtual"
    page.theme_mode = ft.ThemeMode.DARK
    page.bgcolor = ft.Colors.BLUE_GREY_900

    chat = ft.ListView(
        expand=True,
        spacing=10,
        padding=10,
        auto_scroll=True,
    )

    input_box = ft.TextField(
        hint_text="Escribe tu mensaje...",
        autofocus=True,
        expand=True,
        border_radius=20,
        filled=True,
        bgcolor=ft.Colors.BLUE_GREY_800,
        color=ft.Colors.WHITE,
        on_submit=lambda e: enviar()
    )

    def burbuja(mensaje, es_usuario):
        return ft.Row(
            [
                ft.Container(
                    content=ft.Text(
                        mensaje,
                        color=ft.Colors.WHITE if es_usuario else ft.Colors.BLACK,
                        selectable=True,
                    ),
                    padding=12,
                    bgcolor=ft.Colors.BLUE_700 if es_usuario else ft.Colors.GREY_200,
                    border_radius=20,
                    alignment=ft.alignment.center_right if es_usuario else ft.alignment.center_left,
                    margin=ft.margin.only(left=40) if es_usuario else ft.margin.only(right=40),
                    width=350,
                )
            ],
            alignment=ft.MainAxisAlignment.END if es_usuario else ft.MainAxisAlignment.START,
        )

    def enviar():
        user_msg = input_box.value.strip()
        if not user_msg:
            return
        chat.controls.append(burbuja(f"ðŸ§‘ {user_msg}", True))
        bot_msg = responder(user_msg.lower())
        chat.controls.append(burbuja(f"ðŸ¤– {bot_msg}", False))
        input_box.value = ""
        page.update()

    # Mensaje de bienvenida
    chat.controls.append(burbuja("ðŸ¤– Â¡Hola! Soy tu asistente virtual. Â¿En quÃ© puedo ayudarte?", False))

    # Interfaz principal
    page.add(
        ft.Container(
            content=ft.Column(
                [
                    ft.Row(
                        [
                            ft.Icon(ft.Icons.SMART_TOY, size=40, color=ft.Colors.BLUE_400),
                            ft.Text("Asistente Virtual", size=28, weight="bold", color=ft.Colors.BLUE_100),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                    ft.Container(
                        chat,
                        expand=True,
                        height=450,
                        bgcolor=ft.Colors.BLUE_GREY_800,
                        border_radius=15,
                        padding=10,
                        margin=ft.margin.only(top=10, bottom=10),
                    ),
                    ft.Row(
                        [
                            input_box,
                            ft.IconButton(
                                icon=ft.Icons.SEND,
                                icon_color=ft.Colors.BLUE_400,
                                tooltip="Enviar",
                                on_click=lambda e: enviar(),
                            ),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                ],
                expand=True,
                spacing=10,
            ),
            width=500,
            padding=20,
            border_radius=20,
            bgcolor=ft.Colors.BLUE_GREY_800,
            alignment=ft.alignment.center,
        )
    )

ft.app(target=main)